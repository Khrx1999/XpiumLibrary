# conf.py

# Configuration file for the Sphinx documentation builder.

# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
import os
import sys
sys.path.insert(0, os.path.abspath('../src'))

# -- Project information -----------------------------------------------------

project = 'RobotFramework-XLibrary'
author = 'Tassana Khrueawan'
copyright = '2024, Tassana Khrueawan'
# The short X.Y version
version = '11.0.3'
# The full version, including alpha/beta/rc tags
release = '11.0.3'

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.viewcode',
    'sphinx.ext.ifconfig',
    'sphinx.ext.githubpages',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
source_suffix = ['.rst', '.md']

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'th'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further. For a list of options available for each theme, see the
# documentation.
html_theme_options = {
    'collapse_navigation': True,
    'sticky_navigation': True,
    'navigation_depth': 4,
    'includehidden': True,
    'titles_only': False
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names to
# template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  You can override them by providing your own templates
# and assigning them to the html_sidebars dictionary. This might be useful to
# integrate other services or post information related to the project.
html_sidebars = {
    '**': [
        'about.html',
        'navigation.html',
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
        'donate.html',
    ]
}

# -- Extension configuration -------------------------------------------------

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}

# -- Options for todo extension ----------------------------------------------

# If you want to use this extension, you must set this to 'True'
todo_include_todos = False

# -- Options for autodoc extension -------------------------------------------

# This value contains a list of modules to be mocked up. This is useful when
# some external dependencies are not met at build time and break the
# building process. You can add as many modules here as you want. If one of
# these modules is imported at build time by any Sphinx extension or by
# autodocumented Python code, it will be replaced by a mock automatically.
autodoc_mock_imports = []

# -- Options for the linkcode extension --------------------------------------

# This value determines how to generate links to the source code in HTML output.
# This feature is especially useful for projects that want to link to a specific
# tag or commit in a repository. The following function generates links that
# correspond to the current version of the project in GitHub.
import subprocess
import re

# This requires Git and the repository to be available at build time
git_tag = subprocess.check_output(['git', 'describe', '--tags']).decode('utf-8').strip()

# Remove 'v' prefix, if it exists (e.g. 'v1.0.1' -> '1.0.1')
git_tag = re.sub('^v', '', git_tag)

# Define the pattern for source links
html_context = {
    "display_github": True,  # Integrate GitHub
    "github_user": "tassana.khr",  # Username
    "github_repo": "robotframework-xlibrary",  # Repo name
    "github_version": git_tag,  # Version
    "conf_py_path": "/docs/",  # Path in the checkout to the docs root
}

# -- Options for coverage extension ------------------------------------------

# This value is a list of patterns to exclude from coverage check. It is useful
# when you want to exclude certain parts of your code from the coverage report.
coverage_skip_undoc_in_source = True

# -- Options for napoleon extension ------------------------------------------

# This value controls whether to convert Google style docstrings into reStructuredText
# or not. If set to 'True', Sphinx will handle them as native reStructuredText.
napoleon_google_docstring = True

# This value controls whether to convert NumPy style docstrings into reStructuredText
# or not. If set to 'True', Sphinx will handle them as native reStructuredText.
napoleon_numpy_docstring = True

# This value controls whether to include special members (like __init__, __call__, etc.)
# in the output if they have a docstring.
napoleon_include_special_with_doc = True

# This value controls whether to include private members (like _foo, __foo, etc.)
# in the output if they have a docstring.
napoleon_include_private_with_doc = False

# This value controls whether to include protected members (like _foo, _foo, etc.)
# in the output if they have a docstring.
napoleon_include_protected_with_doc = True

# This value controls how to represent attribute docstrings in autodoc.
napoleon_attr_annotations = True